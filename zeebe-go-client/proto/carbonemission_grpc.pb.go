// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/carbonemission.proto

package zeebe_go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CarbonEmission_ProveCarbonEmission_FullMethodName = "/carbonemission.CarbonEmission/prove_carbon_emission"
)

// CarbonEmissionClient is the client API for CarbonEmission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarbonEmissionClient interface {
	ProveCarbonEmission(ctx context.Context, in *EmissionProofRequest, opts ...grpc.CallOption) (*EmissionProofResponse, error)
}

type carbonEmissionClient struct {
	cc grpc.ClientConnInterface
}

func NewCarbonEmissionClient(cc grpc.ClientConnInterface) CarbonEmissionClient {
	return &carbonEmissionClient{cc}
}

func (c *carbonEmissionClient) ProveCarbonEmission(ctx context.Context, in *EmissionProofRequest, opts ...grpc.CallOption) (*EmissionProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmissionProofResponse)
	err := c.cc.Invoke(ctx, CarbonEmission_ProveCarbonEmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarbonEmissionServer is the server API for CarbonEmission service.
// All implementations must embed UnimplementedCarbonEmissionServer
// for forward compatibility
type CarbonEmissionServer interface {
	ProveCarbonEmission(context.Context, *EmissionProofRequest) (*EmissionProofResponse, error)
	mustEmbedUnimplementedCarbonEmissionServer()
}

// UnimplementedCarbonEmissionServer must be embedded to have forward compatible implementations.
type UnimplementedCarbonEmissionServer struct {
}

func (UnimplementedCarbonEmissionServer) ProveCarbonEmission(context.Context, *EmissionProofRequest) (*EmissionProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveCarbonEmission not implemented")
}
func (UnimplementedCarbonEmissionServer) mustEmbedUnimplementedCarbonEmissionServer() {}

// UnsafeCarbonEmissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarbonEmissionServer will
// result in compilation errors.
type UnsafeCarbonEmissionServer interface {
	mustEmbedUnimplementedCarbonEmissionServer()
}

func RegisterCarbonEmissionServer(s grpc.ServiceRegistrar, srv CarbonEmissionServer) {
	s.RegisterService(&CarbonEmission_ServiceDesc, srv)
}

func _CarbonEmission_ProveCarbonEmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmissionProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonEmissionServer).ProveCarbonEmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarbonEmission_ProveCarbonEmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonEmissionServer).ProveCarbonEmission(ctx, req.(*EmissionProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarbonEmission_ServiceDesc is the grpc.ServiceDesc for CarbonEmission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarbonEmission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carbonemission.CarbonEmission",
	HandlerType: (*CarbonEmissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "prove_carbon_emission",
			Handler:    _CarbonEmission_ProveCarbonEmission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/carbonemission.proto",
}
