// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: verifiable_processing.proto

package zeebe_go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VerifiableProcessingService_ProveExecution_FullMethodName  = "/verifiableprocessing.VerifiableProcessingService/prove_execution"
	VerifiableProcessingService_VerifyExecution_FullMethodName = "/verifiableprocessing.VerifiableProcessingService/verify_execution"
)

// VerifiableProcessingServiceClient is the client API for VerifiableProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifiableProcessingServiceClient interface {
	ProveExecution(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResponse, error)
	VerifyExecution(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type verifiableProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifiableProcessingServiceClient(cc grpc.ClientConnInterface) VerifiableProcessingServiceClient {
	return &verifiableProcessingServiceClient{cc}
}

func (c *verifiableProcessingServiceClient) ProveExecution(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProveResponse)
	err := c.cc.Invoke(ctx, VerifiableProcessingService_ProveExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableProcessingServiceClient) VerifyExecution(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, VerifiableProcessingService_VerifyExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifiableProcessingServiceServer is the server API for VerifiableProcessingService service.
// All implementations must embed UnimplementedVerifiableProcessingServiceServer
// for forward compatibility
type VerifiableProcessingServiceServer interface {
	ProveExecution(context.Context, *ProveRequest) (*ProveResponse, error)
	VerifyExecution(context.Context, *VerifyRequest) (*VerifyResponse, error)
	mustEmbedUnimplementedVerifiableProcessingServiceServer()
}

// UnimplementedVerifiableProcessingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVerifiableProcessingServiceServer struct {
}

func (UnimplementedVerifiableProcessingServiceServer) ProveExecution(context.Context, *ProveRequest) (*ProveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveExecution not implemented")
}
func (UnimplementedVerifiableProcessingServiceServer) VerifyExecution(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyExecution not implemented")
}
func (UnimplementedVerifiableProcessingServiceServer) mustEmbedUnimplementedVerifiableProcessingServiceServer() {
}

// UnsafeVerifiableProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifiableProcessingServiceServer will
// result in compilation errors.
type UnsafeVerifiableProcessingServiceServer interface {
	mustEmbedUnimplementedVerifiableProcessingServiceServer()
}

func RegisterVerifiableProcessingServiceServer(s grpc.ServiceRegistrar, srv VerifiableProcessingServiceServer) {
	s.RegisterService(&VerifiableProcessingService_ServiceDesc, srv)
}

func _VerifiableProcessingService_ProveExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableProcessingServiceServer).ProveExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableProcessingService_ProveExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableProcessingServiceServer).ProveExecution(ctx, req.(*ProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableProcessingService_VerifyExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableProcessingServiceServer).VerifyExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableProcessingService_VerifyExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableProcessingServiceServer).VerifyExecution(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifiableProcessingService_ServiceDesc is the grpc.ServiceDesc for VerifiableProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifiableProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "verifiableprocessing.VerifiableProcessingService",
	HandlerType: (*VerifiableProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "prove_execution",
			Handler:    _VerifiableProcessingService_ProveExecution_Handler,
		},
		{
			MethodName: "verify_execution",
			Handler:    _VerifiableProcessingService_VerifyExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verifiable_processing.proto",
}
